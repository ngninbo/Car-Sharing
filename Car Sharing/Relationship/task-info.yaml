type: edu
files:
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the 'COMPANY' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in 'COMPANY' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = -1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();
            return correct();
        }

        @DynamicTest
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/model/Company.java
  visible: true
  text: |
    package carsharing.model;

    import java.util.Objects;

    public class Company {

        private int id;
        private String name;

        public Company(String name) {
            this.name = name;
        }

        public Company(int id, String name) {
            this.id = id;
            this.name = name;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Company)) return false;
            Company company = (Company) o;
            return getId() == company.getId() && Objects.equals(getName(), company.getName());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getId(), getName());
        }


        @Override
        public String toString() {
            return "Company{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/carsharing/util/CarSharingConstants.java
  visible: true
  text: |
    package carsharing.util;

    import java.util.List;

    public class CarSharingConstants {

        // Database properties
        public static final String DB_PATH = "./src/carsharing/db/";
        public static final String JDBC_DRIVER = "org.h2.Driver";
        public static final String COMPANY_LIST_TXT = "\nCompany list:";


        // Menu items
        public static List<String> mainMenuOptions = List.of("1. Log in as a manager", "0. Exit");
        public static List<String> managerMenuOptions = List.of("\n1. Company list", "2. Create a company", "0. Back");

        // Outputs messages
        public static final String EMPTY_COMPANY_LIST_TXT = "\nThe company list is empty!";
        public static final String COMPANY_CREATION_SUCCEED_MSG = "The company was created!";
        public static final String ENTER_COMPANY_NAME_TEXT = "\nEnter the company name: ";

        // SQL Statements
        public static final String CREATE_TABLE_COMPANY_STATEMENT_QUERY = "CREATE TABLE IF NOT EXISTS COMPANY " +
                "(ID INTEGER PRIMARY KEY AUTO_INCREMENT, " +
                " NAME VARCHAR(30) UNIQUE NOT NULL" +
                ");";

        public static final String INSERT_INTO_COMPANY_NAME_VALUES_QUERY = "INSERT INTO COMPANY (NAME) VALUES (?);";

        public static final String SELECT_ALL_COMPANIES_QUERY = "SELECT * FROM COMPANY ORDER BY ID ASC;";

    }
  learner_created: true
- name: src/carsharing/service/CompanyDaoImpl.java
  visible: true
  text: |
    package carsharing.service;

    import carsharing.model.Company;
    import carsharing.repository.CompanyRepository;

    import java.util.List;
    import java.util.Optional;

    public class CompanyDaoImpl implements CompanyDao {

        private final CompanyRepository companyRepository;

        public CompanyDaoImpl(CompanyRepository companyRepository) {
            this.companyRepository = companyRepository;
        }

        @Override
        public List<Company> findAll() {
            return companyRepository.findAll();
        }

        @Override
        public Optional<Company> findById(long id) {
            return Optional.empty();
        }

        @Override
        public Optional<Company> findByName(String name) {
            return Optional.empty();
        }

        @Override
        public void update(String name) {
            companyRepository.save(name);
        }
    }
  learner_created: true
- name: src/carsharing/controller/CompanyController.java
  visible: true
  text: |
    package carsharing.controller;

    import carsharing.model.Company;
    import carsharing.service.CompanyDao;

    import java.util.List;

    public class CompanyController {

        private final CompanyDao companyDao;

        public CompanyController(CompanyDao companyDao) {
            this.companyDao = companyDao;
        }

        public List<Company> findAll() {
            return companyDao.findAll();
        }

        public void save(String name) {
            companyDao.update(name);
        }
    }
  learner_created: true
- name: src/carsharing/service/CompanyDao.java
  visible: true
  text: |
    package carsharing.service;

    import carsharing.model.Company;

    import java.util.List;
    import java.util.Optional;

    public interface CompanyDao {

        List<Company> findAll();
        Optional<Company> findById(long id);
        Optional<Company> findByName(String name);
        void update(String name);
    }
  learner_created: true
- name: src/carsharing/view/CarSharing.java
  visible: true
  text: |
    package carsharing.view;

    import carsharing.controller.CompanyController;
    import carsharing.model.Company;
    import carsharing.repository.CompanyRepository;
    import carsharing.service.CompanyDaoImpl;

    import java.util.List;
    import java.util.Scanner;

    import static carsharing.util.CarSharingConstants.*;

    public class CarSharing {

        private final CompanyController companyController;
        private Scanner scanner;
        private boolean isBack = false;

        private CarSharing(String databaseFilename) {
            this.companyController = new CompanyController(new CompanyDaoImpl(CompanyRepository
                    .init(databaseFilename)
                    .createTableCompany()));
        }

        public static CarSharing init(String databaseFilename) {
            return new CarSharing(databaseFilename);
        }

        public void start() {

            while (true) {

                displayMainMenu();
                scanner = new Scanner(System.in);
                int userInput = scanner.nextInt();

                switch (userInput) {
                    case 1:
                        logInAsManager();
                        break;
                    case 0:
                        System.exit(0);
                        break;
                }
            }
        }

        private void logInAsManager() {

            do {
                displayMainByLoginSucceed();
                scanner = new Scanner(System.in);
                int action = scanner.nextInt();

                switch (action) {
                    case 1:
                        List<Company> companies = companyController.findAll();

                        if (companies.isEmpty()) {
                            System.out.println(EMPTY_COMPANY_LIST_TXT);
                        } else {
                            System.out.println(COMPANY_LIST_TXT);
                            companies.forEach(company -> System.out.printf("%d. %s\n", company.getId(), company.getName()));
                        }
                        break;
                    case 2:
                        System.out.println(ENTER_COMPANY_NAME_TEXT);
                        String name = new Scanner(System.in).nextLine();
                        companyController.save(name);
                        System.out.println(COMPANY_CREATION_SUCCEED_MSG);
                        break;
                    case 0:
                        isBack = true;
                        System.out.println();
                }

            } while (!isBack);

        }

        private void displayMainByLoginSucceed() {
            managerMenuOptions.forEach(System.out::println);
        }

        private void displayMainMenu() {
            mainMenuOptions.forEach(System.out::println);
        }
    }
  learner_created: true
- name: src/carsharing/repository/CompanyRepository.java
  visible: true
  text: |
    package carsharing.repository;

    import carsharing.model.Company;

    import java.sql.*;
    import java.util.ArrayList;
    import java.util.List;

    import static carsharing.util.CarSharingConstants.*;

    public class CompanyRepository {

        private final String dbUrl;

        static {
            try {
                Class.forName(JDBC_DRIVER);
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
        }

        private CompanyRepository(String databaseFilename) {
            this.dbUrl = String.format("jdbc:h2:%s%s", DB_PATH,
                    databaseFilename != null ? databaseFilename : "carSharing");
        }

        public static CompanyRepository init(String databaseFilename) {
            return new CompanyRepository(databaseFilename);
        }

        public CompanyRepository createTableCompany() {

            try (Connection connection = DriverManager.getConnection(dbUrl)) {

                connection.setAutoCommit(true);

                Statement statement = connection.createStatement();

                statement.executeUpdate(CREATE_TABLE_COMPANY_STATEMENT_QUERY);

                statement.close();

            } catch (SQLException sqlEx) {
                sqlEx.printStackTrace();
            }

            return this;
        }

        public List<Company> findAll() {

            List<Company> list = new ArrayList<>();

            try (Connection connection = DriverManager.getConnection(dbUrl)) {

                connection.setAutoCommit(true);

                Statement statement = connection.createStatement();

                ResultSet resultSet = statement.executeQuery(SELECT_ALL_COMPANIES_QUERY);

                while (resultSet.next()) {
                    Company company = new Company(resultSet.getInt("id"), resultSet.getString("name"));
                    list.add(company);
                }

                statement.close();

            } catch (SQLException sqlEx) {
                sqlEx.printStackTrace();
            }

            return list;
        }


        public void save(String name) {

            try (Connection connection = DriverManager.getConnection(dbUrl)) {

                connection.setAutoCommit(true);

                PreparedStatement statement = connection.prepareStatement(INSERT_INTO_COMPANY_NAME_VALUES_QUERY);
                statement.setString(1, name);

                statement.executeUpdate();

                statement.close();

            } catch (SQLException sqlEx) {
                sqlEx.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/carsharing/model/Car.java
  visible: true
  learner_created: true
- name: src/carsharing/repository/CarRepository.java
  visible: true
  learner_created: true
- name: src/carsharing/repository/BaseRepository.java
  visible: true
  learner_created: true
- name: src/carsharing/service/CarDao.java
  visible: true
  learner_created: true
- name: src/carsharing/service/CarDaoImpl.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/CarController.java
  visible: true
  learner_created: true
- name: src/carsharing/db/carsharing.trace.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11503#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 22 Jan 2022 11:39:47 UTC
record: 3
